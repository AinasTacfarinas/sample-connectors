<?xml version="1.0" encoding="UTF-8"?>

<!-- Main Configuration file for server-side ARender HMI (GUI) -->
<!-- This includes : -->
<!-- - Configuring the link to the Rendition Server, via the ClientDocumentService 
	bean -->
<!-- - Configuring standard and custom plugins to access Document repositories -->
<beans default-lazy-init="true" default-autowire="no"
	xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

	<import resource="annotationtemplate-catalog.xml" />

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	    <property name="searchSystemEnvironment" value="true" />
	</bean>

	<!-- <import resource="arender-hmi-logger-interceptor.xml" /> -->

	<!-- <import resource="arender-hmi-errors-interceptor.xml" /> -->

	<!-- Connection to the Rendition Server -->
	<bean id="delegate"
		class="com.arondor.viewer.common.rendition.connector.ClientDocumentService">
		<property name="remoteDocumentServiceProvider">
			<bean
				class="com.arondor.viewer.common.rendition.connector.helper.SimpleRemoteDocumentServiceProvider">
				<property name="router">
					<bean id="renditionPolling"
						class="com.arondor.viewer.common.rendition.connector.helper.RenditionWeatherPolling">
						<property name="pollingInterval" value="1000" />
					</bean>
				</property>
			</bean>
		</property>
		<property name="ignoreDocumentAccessorsWithExceptions" value="false" />
		<property name="maxTries" value="5" />
		<property name="remoteTargets">
			<list>
				<value>${rendition.host:http://localhost:1990/}</value>
				<!-- <value>rmi://localhost:1789/JavaRMIDocumentService</value>  -->
			</list>
		</property>
	</bean>

	<!-- Configuration of the HMI plugins -->
	<bean id="servletDocumentService"
		class="com.arondor.viewer.server.servlet.ServletDocumentService"
		lazy-init="true" scope="prototype">
		<property name="disableCheckDocumentAvailability" value="true" />

		<!-- Reference to the Rendition Server -->
		<property name="delegate" ref="delegate" />

		<!-- List of registered HMI plugins, in the form of URL Parsers -->
		<!-- Each plugin is triggered depending on the result of its DocumentServiceURLParser.canParse() 
			method -->


		<property name="registeredURLParsers">
			<list>
				<!-- Default URL Parser : URL document references -->
				<bean class="com.arondor.viewer.server.servlet.urlparser.DefaultURLParser" />
				<bean
					class="com.arondor.viewer.server.servlet.urlparser.DocumentIdURLParser" />
				<bean
					class="com.arondor.viewer.server.servlet.urlparser.ExternalBeanURLParser" />
				<bean
					class="com.arondor.viewer.server.servlet.urlparser.FallbackURLParser" />

				<!-- FileNet plugin -->
				<!-- <ref bean="fileNetUrlParser"/> -->
			</list>
		</property>

		<!-- Use this bean to manually associate an AnnotationAccessor using a 
			well-defined bean -->
		<property name="annotationAccessorFactory">
			<bean
				class="com.arondor.viewer.common.annotation.BeanAnnotationAccessorFactory">
				<property name="beanName" value="xfdfAnnotationAccessor" />
			</bean>
		</property>
	</bean>


	<!-- Possibility to display username in perf log -->
	<!-- <bean id="loggerInterceptor" class="com.arondor.viewer.common.logger.LoggerInterceptor"> -->
	<!-- <property name="username" value="true" /> -->
	<!-- </bean> -->

	<bean id="xfdfAnnotationAccessor"
		class="com.arondor.viewer.xfdf.annotation.XFDFAnnotationAccessor"
		scope="prototype">
		<property name="contentAccessor">
			<bean
				class="com.arondor.viewer.xfdf.annotation.FileSerializedContentAccessor">
				<property name="path" value="annotations/" />
			</bean>
		</property>
		<!-- <property name="recoverCDATA" value="true" /> -->


		<property name="annotationCreationPolicy">
			<bean
				class="com.arondor.viewer.client.api.annotation.AnnotationCreationPolicy">
				<property name="canCreateAnnotations" value="true" />
				<property name="textAnnotationsSupportHtml" value="true" />
				<property name="textAnnotationsSupportReply" value="true" />
				<property name="textAnnotationsSupportStatus" value="true" />

				<!-- For each annotation, show a list of security levels to choose from -->
				<property name="annotationsSupportSecurity" value="false" />
				<property name="availableSecurityLevels">
					<ref bean="availableSecurityLevels" />
				</property>

				<property name="annotationTemplateCatalog">
					<ref bean="annotationTemplateCatalog" />
				</property>
			</bean>
		</property>

	</bean>

	<!-- List of available Security Levels for annotations. Each level as a 
		symbolic, technical name, and a per-locale display name. Fallbacks to english 
		if no display name is provided for a given locale -->
	<bean id="availableSecurityLevels" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<bean class="com.arondor.viewer.annotation.common.SecurityLevel">
					<property name="symbolicName" value="private" />
					<property name="localizedDisplayNames">
						<map>
							<entry>
								<key>
									<value>fr</value>
								</key>
								<value>Priv√©</value>
							</entry>
							<entry>
								<key>
									<value>en</value>
								</key>
								<value>Private</value>
							</entry>
						</map>
					</property>
				</bean>
				<bean class="com.arondor.viewer.annotation.common.SecurityLevel">
					<property name="symbolicName" value="public" />
					<property name="localizedDisplayNames">
						<map>
							<entry>
								<key>
									<value>fr</value>
								</key>
								<value>Public</value>
							</entry>
							<entry>
								<key>
									<value>en</value>
								</key>
								<value>Public</value>
							</entry>
						</map>
					</property>
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- Default, in-memory only, Annotation store policy -->
	<bean id="inMemoryAnnotations"
		class="com.arondor.viewer.common.documentaccessor.DocumentAnnotationAccessorMemoryCache"
		scope="prototype" />


	<!-- Use this bean to configure FileNet plugin -->
	<!-- <bean id="fileNetUrlParser" class="com.arondor.viewer.filenetce.FileNetURLParser"> 
		<property name="objectStoreProvider"> <bean class="com.arondor.viewer.filenetce.helper.impl.LoginPasswordObjectStoreProvider"> 
		<property name="ceConnectionUri" value="http://192.168.0.222:9080/wsi/FNCEWS40MTOM/" 
		/> <property name="login" value="administrator" /> <property name="password" 
		value="filenet" /> </bean> </property> <property name="documentPropertiesConfiguration"> 
		<ref bean="documentPropertiesConfiguration" /> </property> </bean> -->

	<!-- <bean id="documentPropertiesConfiguration" class="com.arondor.viewer.filenetce.config.DocumentPropertiesConfiguration"> 
		<property name="defaultDateFormat" value="${date.format}" /> <property name="includedSystemProperties"> 
		<list> <value>DateCreated</value> <value>DateLastModified</value> <value>Creator</value> 
		<value>LastModifier</value> </list> </property> <property name="excludedCustomProperties"> 
		<list> </list> </property> <property name="documentAnnotationConverter"> 
		<bean class="com.arondor.viewer.filenet.annotation.FileNetAnnotationConverter"> 
		</bean> </property> </bean> -->

	<!-- <bean id="inMemoryFileNetFormatAnnotations" class="com.arondor.viewer.common.documentaccessor.DocumentAnnotationAccessorMemoryCacheWithConverter" 
		scope="prototype"> <property name="documentAnnotationConverter"> <bean class="com.arondor.viewer.filenet.annotation.FileNetAnnotationConverter" 
		scope="singleton"/> </property> </bean> -->

	<!-- Generic, Application-wide DocumentId generator -->
	<bean id="documentIdGenerator"
		class="com.arondor.viewer.common.document.id.Base64SelfContainedDocumentIdGenerator">
	</bean>

	<bean id="rmiDocumentService" class="com.arondor.viewer.common.javarmi.RMIWrapper"
		scope="prototype">
		<property name="timeOut" value="120000" />
	</bean>

	<bean id="restDocumentService"
		class="com.arondor.arender.viewer.common.rest.DocumentServiceRestClient"
		scope="prototype">
	</bean>
	<import resource="arender-custom-server-integration.xml" />
</beans>

